@page "/BookingHistoryPage/{Type:int}"
@page "/BookingHistoryPage/{Type:int}/{Id}"

@using System.Globalization
@using System.Net.Http.Headers
@using Domain.Dtos
@using IoC.Constants
@using UI.FormEntities
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject NavigationManager NavManager
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IDialogService DialogService

<NavBar/>

<MudContainer Style="width: 100%">
    <MudGrid JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Height="100%" Style="width: 100%">
        <MudItem Style="width: 100%">
            @switch (_type)
            {
                case BookingHistoryPageType.OwnBookings:
                    <MudText Typo="Typo.h3" Align="Align.Start" Style="width: 100%" Class="mb-2">
                        @Localization["BookingHistoryPage_Title_OwnBookings"]
                    </MudText>
                    break;
                case BookingHistoryPageType.BookingsForBerth:
                    <MudText Typo="Typo.h3" Align="Align.Start" Style="width: 100%" Class="mb-2">
                        @Localization["BookingHistoryPage_Title_BookingsForBerth"]
                    </MudText>
                    break;
                case BookingHistoryPageType.BookingsForHarbor:
                    <MudText Typo="Typo.h3" Align="Align.Start" Style="width: 100%" Class="mb-2">
                        @Localization["BookingHistoryPage_Title_BookingsForHarbor"]
                    </MudText>
                    break;
                case BookingHistoryPageType.BookingsForShip:
                    <MudText Typo="Typo.h3" Align="Align.Start" Style="width: 100%" Class="mb-2">
                        @Localization["BookingHistoryPage_Title_BookingsForShip"]
                    </MudText>
                    break;
                default:
                    <MudText Typo="Typo.h3" Align="Align.Start" Style="width: 100%" Class="mb-2">
                        @Localization["BookingHistoryPage_Title_Undefined"]
                    </MudText>
                    break;
            }
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info"
                       @onclick="createBooking">
                @Localization["BookingHistoryPage_CreateButton"]
            </MudButton>
        </MudItem>
        <MudPaper Class="d-flex flex-column flex-grow-1 gap-2 ma-2 pa-2" Elevation="0">
            @foreach (var booking in _bookings)
            {
                <MudPaper Class="d-flex flex-row flex-grow-1 gap-2 pa-1" Elevation="1">
                    <MudPaper Class="d-flex flex-column justify-start flex-grow-1 gap-1" Elevation="0">
                        <MudText Typo="@Typo.subtitle1">
                            @Localization["BookingHistoryPage_ShipName"]:
                            @booking.ShipName
                        </MudText>
                        <MudText Typo="@Typo.subtitle1">
                            @Localization["BookingHistoryPage_HarborName"]:
                            @booking.HarborName
                        </MudText>
                        <MudText Typo="@Typo.subtitle1">
                            @Localization["BookingHistoryPage_BerthName"]:
                            @booking.BerthName
                        </MudText>
                        
                        <MudText Typo="@Typo.subtitle1">
                            @Localization["BookingHistoryPage_StartDate"]:
                            @booking.StartDate
                        </MudText>
                        <MudText Typo="@Typo.subtitle1">
                            @Localization["BookingHistoryPage_EndDate"]:
                            @booking.EndDate
                        </MudText>
                        @if (booking.AdditionalServices.Any())
                        {
                            <MudPaper Class="d-flex flex-column justify-start flex-grow-1 gap-1" Elevation="0">
                                <MudText Typo="@Typo.subtitle1">
                                    @Localization["BookingHistoryPage_Services"]:
                                </MudText>
                                <MudPaper Class="d-flex flex-row flex-wrap flex-grow-1 gap-2" Elevation="0">
                                    @foreach (var additionalService in booking.AdditionalServices)
                                    {
                                        <MudPaper Class="d-flex flex-column justify-start flex-grow-1 gap-1" Elevation="1">
                                            <MudText Typo="@Typo.subtitle2">
                                                @Localization["BookingHistoryPage_Services_DisplayName"]:
                                                @additionalService.DisplayName
                                            </MudText>
                                            <MudText Typo="@Typo.subtitle2">
                                                @Localization["BookingHistoryPage_Services_Description"]:
                                                @additionalService.Description
                                            </MudText>
                                            <MudText Typo="@Typo.subtitle2">
                                                @Localization["BookingHistoryPage_Services_Price"]:
                                                @additionalService.Price$
                                            </MudText>
                                        </MudPaper>
                                    }
                                </MudPaper>
                            </MudPaper>
                        }
                        
                    </MudPaper>
                    @if(_ownBookings.Any(x => x.Id.Equals(booking.Id)))
                    {
                        <MudPaper Class="d-flex flex-column flex-grow-1 gap-2" Elevation="0">
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success"
                                       @onclick="() => payForBooking(booking)" Disabled="booking.IsPayed" FullWidth="true">
                                @if (booking.IsPayed)
                                {
                                    @Localization["BookingHistoryPage_PayButton_Payed"]
                                }
                                else
                                {
                                    @Localization["BookingHistoryPage_PayButton_NotPayed"]
                                }
                            </MudButton>
                            @if (!booking.IsPayed && booking.StartDate > DateTime.Now)
                            {
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning"
                                           @onclick="() => editBooking(booking)">
                                    @Localization["BookingHistoryPage_EditButton"]
                                </MudButton>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error"
                                           @onclick="() => deleteBooking(booking)" FullWidth="true">
                                    @Localization["BookingHistoryPage_DeleteButton"]
                                </MudButton>
                            }
                        </MudPaper>
                    }
                    
                </MudPaper>
            }
            @if (!_bookings.Any())
            {
                <MudText Typo="@Typo.subtitle1" Align="Align.Center" Style="width: 100%">
                    @Localization["BookingHistoryPage_EmptyBookingsData"]
                </MudText>
            }
        </MudPaper>
    </MudGrid>
</MudContainer>

@code {

    [Parameter]
    public int Type { get; set; }

    [Parameter]
    public string Id { get; set; }

    private List<BookingPreviewDataDto> _bookings = new List<BookingPreviewDataDto>();
    private List<BookingPreviewDataDto> _ownBookings = new List<BookingPreviewDataDto>();
    private string username = "";
    private BookingHistoryPageType _type;
    
    private void createBooking() => NavManager.NavigateTo(PageNavigateConstants.BookingFormPage);
    
    private async Task payForBooking(BookingPreviewDataDto booking)
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.GetAsync(string.Format("{0}?id={1}",
            ApiRoutes.Booking.BookingDataForCheck, booking.Id));

        var dataForCheck = await response.Content.ReadFromJsonAsync<BookingDataForCheckDto>();
        
        if (dataForCheck != null)
        {
            var parameters = new DialogParameters();
            var options = new DialogOptions { CloseOnEscapeKey = true };
            parameters.Add("BookingDataForCheckDto", dataForCheck);

            var confirmationResult = await (await DialogService.ShowAsync<BookingPayDialog>(
                Localization["BookingHistoryPage_BookingPayDialog_Title"],
                parameters, options)).Result;

            if (!confirmationResult.Cancelled && bool.TryParse(confirmationResult.Data.ToString(), out bool resultBool))
            {
                response = await Client.PostAsJsonAsync(
                    ApiRoutes.BookingCheck.Controller,
                    new BookingCheckDataDto
                    {
                        BankTransactionId = Guid.NewGuid().ToString(),
                        BookingId = booking.Id,
                        Date = DateTime.Now,
                        Description = string.Format("You have payed {0}$ for booking berth: {1} in harbor: {2}",
                            dataForCheck.TotalCost, dataForCheck.BerthName, dataForCheck.HarborName),
                        TotalCost = dataForCheck.TotalCost
                    });

                if (!response.IsSuccessStatusCode)
                {
                    parameters = new DialogParameters();
                    parameters.Add("Error", await response.Content.ReadAsStringAsync());
                    
                    await (await DialogService.ShowAsync<ErrorDialog>(
                        Localization["BookingHistoryPage_ErrorDialog_Title"],
                        parameters, options)).Result;
                }

                switch (_type)
                {
                    case BookingHistoryPageType.OwnBookings:
                        response = await Client.GetAsync(string.Format("{0}?username={1}",
                            ApiRoutes.Booking.OwnBookings,
                            username));
                        break;
                    case BookingHistoryPageType.BookingsForBerth:
                        response = await Client.GetAsync(string.Format("{0}?id={1}",
                            ApiRoutes.Booking.BookingsForBerth,
                            Id));
                        break;
                    case BookingHistoryPageType.BookingsForHarbor:
                        response = await Client.GetAsync(string.Format("{0}?id={1}",
                            ApiRoutes.Booking.BookingsForHarbor,
                            Id));
                        break;
                    case BookingHistoryPageType.BookingsForShip:
                        response = await Client.GetAsync(string.Format("{0}?id={1}",
                            ApiRoutes.Booking.OwnBookingsForShip,
                            Id));
                        break;
                }

                _bookings = await response.Content.ReadFromJsonAsync<List<BookingPreviewDataDto>>();

                StateHasChanged();
            }
        }
    }
    
    private async Task editBooking(BookingPreviewDataDto booking)
    {
        NavManager.NavigateTo(string.Format("{0}/{1}",
            PageNavigateConstants.BookingFormPage,
            booking.Id));
    }
    
    private async Task deleteBooking(BookingPreviewDataDto booking)
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);
        
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var confirmationResult = await (await DialogService.ShowAsync<DeleteDialog>(
            Localization["BookingHistoryPage_DeleteDialog_Title"],
            parameters, options)).Result;

        if (!confirmationResult.Cancelled && bool.TryParse(confirmationResult.Data.ToString(), out bool resultBool))
        {
            var response = await Client.DeleteAsync(string.Format(
                "{0}?id={1}",
                ApiRoutes.Booking.Controller,
                booking.Id));

            if (!response.IsSuccessStatusCode)
            {
                parameters = new DialogParameters();
                parameters.Add("Error", await response.Content.ReadAsStringAsync());
                
                await (await DialogService.ShowAsync<ErrorDialog>(
                    Localization["BookingHistoryPage_ErrorDialog_Title"],
                    parameters, options)).Result;
            }

            switch (_type)
            {
                case BookingHistoryPageType.OwnBookings:
                    response = await Client.GetAsync(string.Format("{0}?username={1}",
                        ApiRoutes.Booking.OwnBookings,
                        username));
                    break;
                case BookingHistoryPageType.BookingsForBerth:
                    response = await Client.GetAsync(string.Format("{0}?id={1}",
                        ApiRoutes.Booking.BookingsForBerth,
                        Id));
                    break;
                case BookingHistoryPageType.BookingsForHarbor:
                    response = await Client.GetAsync(string.Format("{0}?id={1}",
                        ApiRoutes.Booking.BookingsForHarbor,
                        Id));
                    break;
                case BookingHistoryPageType.BookingsForShip:
                    response = await Client.GetAsync(string.Format("{0}?id={1}",
                        ApiRoutes.Booking.OwnBookingsForShip,
                        Id));
                    break;
            }

            _bookings = await response.Content.ReadFromJsonAsync<List<BookingPreviewDataDto>>();

            StateHasChanged();
        }
    }

    private async Task getDataAsync()
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.GetAsync(ApiRoutes.Account.Controller);

        var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

        if (userDto == null)
        {
            await LocalStorageService.RemoveItemAsync("token");
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        username = userDto.Username;
        
        response = await Client.GetAsync(ApiRoutes.Booking.OwnBookings + "?username=" + username);

        _ownBookings = await response.Content.ReadFromJsonAsync<List<BookingPreviewDataDto>>();

        _type = (BookingHistoryPageType)Enum
            .ToObject(typeof(BookingHistoryPageType), Type);

        switch (_type)
        {
            case BookingHistoryPageType.OwnBookings:
                response = await Client.GetAsync(string.Format("{0}?username={1}",
                    ApiRoutes.Booking.OwnBookings,
                    username));
                break;
            case BookingHistoryPageType.BookingsForBerth:
                response = await Client.GetAsync(string.Format("{0}?id={1}",
                    ApiRoutes.Booking.BookingsForBerth,
                    Id));
                break;
            case BookingHistoryPageType.BookingsForHarbor:
                response = await Client.GetAsync(string.Format("{0}?id={1}",
                    ApiRoutes.Booking.BookingsForHarbor,
                    Id));
                break;
            case BookingHistoryPageType.BookingsForShip:
                response = await Client.GetAsync(string.Format("{0}?id={1}",
                    ApiRoutes.Booking.OwnBookingsForShip,
                    Id));
                break;
        }

        _bookings = await response.Content.ReadFromJsonAsync<List<BookingPreviewDataDto>>();
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }
        
        await getDataAsync();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}