@page "/Authorization"

@using Domain.Dtos
@using IoC.Constants
@using Microsoft.AspNetCore.Components
@using UI.FormEntities
@using UI.FormEntities.Account
@using UI.Validators.Account
@using System.Globalization
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject NavigationManager NavManager
@inject LoginAccountFormValidation LoginAccountFormValidator
@inject RegisterAccountFormValidation RegisterAccountFormValidation
@inject UserAuthorizationHelpService UserAuthorizationHelpService
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization

<MudPaper Height="100%" Width="100%" Class="h-100 mx-0 my-0 px-0 py-0 d-flex flex-column">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="h-100 mx-0 my-0 px-0 py-0">
        <NavBar/>
        <MudTabs Elevation="2" Rounded="true" PanelClass="pa-6" Centered="true" Class="py-16">
            <MudTabPanel Text="@Localization["AuthorizationPage_LoginTab_TabTitle"]">
                <MudGrid>
                    <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                        <MudCard>
                            <MudForm @ref="loginForm" Model="@_loginModel" Validation="@(LoginAccountFormValidator.ValidateValue)" ValidationDelay="0">
                            <MudCardContent>
                                <MudTextField Label="@Localization["AuthorizationPage_LoginTab_EmailLabel"]" 
                                              HelperText="@Localization["AuthorizationPage_LoginTab_EmailHelperText"]"
                                              @bind-Value="_loginModel.Email"
                                              For="@(() => _loginModel.Email)"/>
                                <MudTextField Label="@Localization["AuthorizationPage_LoginTab_PasswordLabel"]" 
                                              HelperText="@Localization["AuthorizationPage_LoginTab_PasswordHelperText"]" Class="mt-3"
                                              @bind-Value="_loginModel.Password"
                                              For="@(() => _loginModel.Password)" InputType="InputType.Password"/>
                            </MudCardContent>
                            </MudForm>
                            <MudCardActions>
                                @if (_loginAlertVisible)
                                {
                                    <MudAlert Severity="Severity.Error"
                                              ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                              CloseIconClicked="(() => closeAlert(AlertDestination.Login))">
                                        @Localization["AuthorizationPage_LoginTab_LoginErrorAlert"]: @_loginErrorText
                                    </MudAlert>
                                }

                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled" Color="Color.Primary"
                                           Class="ml-auto" @onclick="login">
                                    @Localization["AuthorizationPage_LoginTab_LoginButton"]
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            <MudTabPanel Text="@Localization["AuthorizationPage_RegisterTab_TabTitle"]">
                <MudGrid>
                    <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                        <MudCard>
                            <MudForm @ref="registerForm" Model="@_registerModel" Validation="@(RegisterAccountFormValidation.ValidateValue)" ValidationDelay="0">
                            <MudCardContent>
                                <MudTextField Label="@Localization["AuthorizationPage_RegisterTab_UsernameLabel"]"
                                              HelperText="@Localization["AuthorizationPage_RegisterTab_UsernameHelperText"]"
                                              @bind-Value="_registerModel.Username"
                                              For="@(() => _registerModel.Username)"/>
                                <MudTextField Label="@Localization["AuthorizationPage_RegisterTab_DisplayNameLabel"]"
                                              HelperText="@Localization["AuthorizationPage_RegisterTab_DisplayNameHelperText"]"
                                              @bind-Value="_registerModel.DisplayName"
                                              For="@(() => _registerModel.DisplayName)"/>
                                <MudTextField Label="@Localization["AuthorizationPage_RegisterTab_EmailLabel"]" Class="mt-3"
                                              HelperText="@Localization["AuthorizationPage_RegisterTab_EmailHelperText"]"
                                              @bind-Value="_registerModel.Email"
                                              For="@(() => _registerModel.Email)"/>
                                <MudTextField Label=@Localization["AuthorizationPage_RegisterTab_PasswordLabel"]
                                              HelperText="@Localization["AuthorizationPage_RegisterTab_PasswordHelperText"]" Class="mt-3"
                                              @bind-Value="_registerModel.Password"
                                              For="@(() => _registerModel.Password)" InputType="InputType.Password"/>
                                <MudTextField Label="@Localization["AuthorizationPage_RegisterTab_ConfirmPasswordLabel"]"
                                              HelperText="@Localization["AuthorizationPage_RegisterTab_ConfirmPasswordHelperText"]" Class="mt-3"
                                              @bind-Value="_registerModel.PasswordConfirm"
                                              For="@(() => _registerModel.PasswordConfirm)" InputType="InputType.Password"/>
                            </MudCardContent>
                            </MudForm>
                            <MudCardActions>
                                @if (_registerAlertVisible)
                                {
                                    <MudAlert Severity="Severity.Error"
                                              ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                              CloseIconClicked="(() => closeAlert(AlertDestination.Register))">
                                        @Localization["AuthorizationPage_RegisterTab_RegisterErrorAlert"]: @_registerErrorText
                                    </MudAlert>
                                }
                                <MudButton ButtonType="ButtonType.Submit"
                                           Variant="Variant.Filled" Color="Color.Primary"
                                           Class="ml-auto"
                                           @onclick="register">
                                    @Localization["AuthorizationPage_RegisterTab_RegisterButton"]
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </MudContainer>
</MudPaper>

@code {
    private MudForm loginForm;
    private MudForm registerForm;
    
    private bool _registerAlertVisible = false;
    private bool _loginAlertVisible = false;
    private string _loginErrorText = "";
    private string _registerErrorText = "";
    private readonly RegisterAccountForm _registerModel = new RegisterAccountForm();
    private readonly LoginAccountForm _loginModel = new LoginAccountForm();

    private async Task register()
    {
        registerForm.Validate();
        
        if (!registerForm.IsValid)
        {
            return;
        }
        
        var registerDto = new RegisterDto()
        {
            Username = _registerModel.Username,
            DisplayName = _registerModel.DisplayName,
            Email = _registerModel.Email,
            Password = _registerModel.PasswordConfirm
        };

        var response = await Client.PostAsJsonAsync(ApiRoutes.Account.Register, registerDto);

        if (response.IsSuccessStatusCode)
        {
            var _userDto = await response.Content.ReadFromJsonAsync<UserDto>();
            await LocalStorageService.SetItemAsync("token", _userDto.Token);
            UserAuthorizationHelpService.Authorization();
            NavManager.NavigateTo(PageNavigateConstants.HomePage);
        }
        else
        {
            _registerErrorText = await response.Content.ReadAsStringAsync();
            _registerAlertVisible = true;
        }
    }

    private async Task login()
    {
        loginForm.Validate();
        
        if (!loginForm.IsValid)
        {
            return;
        }
        
        var loginDto = new LoginDto()
        {
            Email = _loginModel.Email,
            Password = _loginModel.Password
        };

        var response = await Client.PostAsJsonAsync(ApiRoutes.Account.Login, loginDto);

        if (response.IsSuccessStatusCode)
        {
            var _userDto = await response.Content.ReadFromJsonAsync<UserDto>();
            await LocalStorageService.SetItemAsync("token", _userDto.Token);
            UserAuthorizationHelpService.Authorization();
            NavManager.NavigateTo(PageNavigateConstants.HomePage);
        }
        else
        {   
            _loginErrorText = await response.Content.ReadAsStringAsync();
            _loginAlertVisible = true;    
        }
    }

    private async Task closeAlert(AlertDestination alertDirection)
    {
        switch (alertDirection)
        {
            case AlertDestination.Login:
                _loginErrorText = "";
                _loginAlertVisible = false;
                break;
            case AlertDestination.Register:
                _registerErrorText = "";
                _registerAlertVisible = false;
                break;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();
        
        if (UserAuthorizationHelpService.IsUserAuthenticated == null)
        {
            await UserAuthorizationHelpService.IsCredentialsRight();
        }

        if(UserAuthorizationHelpService.IsUserAuthenticated ?? false)
        {
            NavManager.NavigateTo(PageNavigateConstants.HomePage);
        }
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();
        
        StateHasChanged();
    }
}