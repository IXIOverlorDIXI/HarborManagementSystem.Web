@page "/BerthFormPage/{Id}"

@using UI.Validators.Harbor
@using UI.FormEntities
@using System.Globalization
@using System.Net.Http.Headers
@using IoC.Constants
@using Domain.Dtos
@using UI.FormEntities.Harbor
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject NavigationManager NavManager
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject BerthValidator BerthValidator

<NavBar/>

<MudTabs Elevation="2" Rounded="true" PanelClass="pa-6" Centered="true">
    <MudTabPanel Text="@Localization["BerthFormPage_Title"]">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                @if (_lastCreatedBerthId.HasValue)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-2"
                               OnClick="toBerthPage">
                        @Localization["BerthFormPage_ToBerthPageButton"]
                    </MudButton>
                }
                <MudCard>
                    <MudForm @ref="form" Model="@_berthForm" Validation="@(BerthValidator.ValidateValue)" ValidationDelay="0">
                        <MudCardContent>
                            <MudTextField Label="@Localization["BerthFormPage_DisplayNameLabel"]"
                                          HelperText="@Localization["BerthFormPage_DisplayNameHelperText"]"
                                          Class="mt-3"
                                          @bind-Value="_berthForm.DisplayName" For="@(() => _berthForm.DisplayName)"/>
                            <MudTextField Label="@Localization["BerthFormPage_DescriptionLabel"]"
                                          HelperText="@Localization["BerthFormPage_DescriptionHelperText"]"
                                          Class="mt-3"
                                          @bind-Value="_berthForm.Description" For="@(() => _berthForm.Description)"/>
                            <MudNumericField Label="@Localization["BerthFormPage_PriceLabel"]"
                                          HelperText="@Localization["BerthFormPage_PriceHelperText"]"
                                          Class="mt-3"
                                          @bind-Value="_berthForm.Price" For="@(() => _berthForm.Price)"/>
                            <MudSelect T="ShipTypeDto"
                                       @bind-SelectedValues="_berthForm.SuitableShipTypes"
                                      
                                       Label="@Localization["BerthFormPage_ShipType_Label"]"
                                       Text="@Localization["BerthFormPage_ShipType_Text"]"
                                       MultiSelection="true">
                                @foreach (var type in _shipTypes)
                                {
                                    <MudSelectItem T="ShipTypeDto" Value="@type">
                                        <div class="d-flex flex-column gap-1 ma-0 pa-0">
                                            <MudText Typo="Typo.subtitle1">
                                                @Localization["BerthFormPage_ShipTypeName"]:
                                                @type.TypeName
                                            </MudText>
                                            <MudText Typo="Typo.subtitle2">
                                                @Localization["BerthFormPage_ShipTypeDescription"]:
                                                @type.Description
                                            </MudText>
                                        </div>
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        </MudCardContent>
                    </MudForm>
                    <MudCardActions>
                        @if (_createBerthErrorAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateBerthError))">
                                @Localization["BerthFormPage_ErrorAlert"]:
                                @_createBerthError
                            </MudAlert>
                        }
                        @if (_createBerthSuccessAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateBerthSuccess))">
                                @Localization["BerthFormPage_SuccessAlert"]
                            </MudAlert>
                        }
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                   @onclick="berthSave">
                            @Localization["BerthFormPage_CreateButton"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    [Parameter]
    public string Id { get; set; }

    private MudForm form;
    private ShipTypeDto test = new ShipTypeDto();
    private List<ShipTypeDto> _shipTypes { get; set; } = new List<ShipTypeDto>();
    private BerthForm _berthForm { get; set; } = new BerthForm();
    private bool _createBerthErrorAlertVisibile = false;
    private bool _createBerthSuccessAlertVisibile = false;
    private string _createBerthError = "";
    private Guid? _lastCreatedBerthId = null;

    private async Task closeAlert(AlertDestination alertDirection)
    {
        switch (alertDirection)
        {
            case AlertDestination.CreateBerthError:
                _createBerthError = "";
                _createBerthErrorAlertVisibile = false;
                break;
            case AlertDestination.CreateBerthSuccess:
                _createBerthSuccessAlertVisibile = false;
                break;
        }
    }
    
    private void toBerthPage() => NavManager.NavigateTo((string.Format("{0}/{1}/{2}/{3}",
        PageNavigateConstants.HarborPage,
        Id,
        PageNavigateConstants.BerthPage,
        _lastCreatedBerthId.Value)));
    
    private async Task berthSave()
    {
        form.Validate();
        
        if (!form.IsValid)
        {
            return;
        }
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);
        
        var response = await Client.PostAsJsonAsync(ApiRoutes.Berth.Controller, new BerthDataDto()
        {
            DisplayName = _berthForm.DisplayName,
            Description = _berthForm.Description,
            SuitableShipTypes = _berthForm.SuitableShipTypes.ToList(),
            Price = _berthForm.Price,
            HarborId = Guid.Parse(Id)
        });

        if (response.IsSuccessStatusCode)
        {
            _createBerthError = "";
            _createBerthSuccessAlertVisibile = true;
            _createBerthErrorAlertVisibile = false;
        }
        else
        {
            _createBerthError = await response.Content.ReadAsStringAsync();
            _createBerthSuccessAlertVisibile = false;
            _createBerthErrorAlertVisibile = true;
        }

        _lastCreatedBerthId = (await response.Content.ReadFromJsonAsync<BerthDataDto>()).Id;
        
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.GetAsync(ApiRoutes.Account.Controller);

        var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

        if (userDto == null)
        {
            await LocalStorageService.RemoveItemAsync("token");
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        response = await Client.GetAsync(ApiRoutes.ShipType.Controller);

        _shipTypes = await response.Content.ReadFromJsonAsync<List<ShipTypeDto>>();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}