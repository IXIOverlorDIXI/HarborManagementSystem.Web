@page "/BookingFormPage"
@page "/BookingFormPage/{Id}"

@using System.Globalization
@using IoC.Constants
@using System.Net.Http.Headers
@using Domain.Dtos
@using UI.FormEntities
@using UI.FormEntities.Booking
@using UI.Validators.Booking
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject NavigationManager NavManager
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject BookingValidator BookingValidator
@inject IDialogService DialogService

<NavBar/>


<MudTabs ActivePanelIndex="@_activePanel" Elevation="2" Rounded="true" PanelClass="pa-6" Centered="true">
<MudTabPanel Text="@Localization["BookingFormPage_ShipTab_Title"]" Disabled="isDisabledShipTab">
    <MudGrid>
        <MudItem xs="12" sm="7" Class="mx-auto pa-6">
            <MudCard>
                <MudForm @ref="form" Model="@_bookingForm" Validation="@(BookingValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudSelect T="Guid" @bind-Value="_bookingForm.ShipId" For="() => _bookingForm.ShipId"
                               Label="@Localization["BookingFormPage_ShipTab_Label"]"
                               Text="@Localization["BookingFormPage_ShipTab_Text"]">
                        @foreach (var ship in _ships)
                        {
                            <MudSelectItem T="Guid" Value="@ship.Id">
                                <div class="d-flex flex-column gap-1 ma-0 pa-0">
                                    <MudText Typo="Typo.subtitle1">
                                        @Localization["BookingFormPage_ShipTab_ShipTypeName"]:
                                        @ship.DisplayName
                                    </MudText>
                                    <MudText Typo="Typo.subtitle2">
                                        @Localization["BookingFormPage_ShipTab_ShipDescription"]:
                                        @ship.ShipTypeName
                                    </MudText>
                                </div>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                </MudForm>
                <MudCardActions Class="d-flex justify-end" Style="width: 100%">
                    @if (!_bookingForm.ShipId.Equals(Guid.Empty))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   @onclick="nextHarborTab">
                            @Localization["BookingFormPage_ShipTab_NextButton"]
                        </MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudTabPanel>
<MudTabPanel Text="@Localization["BookingFormPage_HarborTab_Title"]" Disabled="isDisabledHarborTab">
    <MudGrid>
        <MudItem xs="12" sm="7" Class="mx-auto pa-6">
            <MudCard>
                <MudForm @ref="form" Model="@_bookingForm" Validation="@(BookingValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudSelect T="Guid" @bind-Value="_bookingForm.HarborId" For="() => _bookingForm.HarborId"
                               Label="@Localization["BookingFormPage_HarborTab_Label"]"
                               Text="@Localization["BookingFormPage_HarborTab_Text"]">
                        @foreach (var harbor in _harbors)
                        {
                            <MudSelectItem T="Guid" Value="@harbor.Id">
                                <div class="d-flex flex-column gap-1 ma-0 pa-0">
                                    <MudText Typo="Typo.subtitle1">
                                        @Localization["BookingFormPage_HarborTab_DisplayName"]:
                                        @harbor.DisplayName
                                    </MudText>
                                    <MudText Typo="Typo.subtitle2">
                                        @Localization["BookingFormPage_HarborTab_Description"]:
                                        @harbor.Description
                                    </MudText>
                                </div>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                </MudForm>

                <MudCardActions Class="d-flex justify-space-between flex-grow-1 gap-4" Style="width: 100%">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               @onclick="backShipTab">
                        @Localization["BookingFormPage_HarborTab_BackButton"]
                    </MudButton>
                    @if (!_bookingForm.HarborId.Equals(Guid.Empty))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   @onclick="nextBerthTab">
                            @Localization["BookingFormPage_HarborTab_NextButton"]
                        </MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudTabPanel>
<MudTabPanel Text="@Localization["BookingFormPage_BerthTab_Title"]" Disabled="isDisabledBerthTab">
    <MudGrid>
        <MudItem xs="12" sm="7" Class="mx-auto pa-6">
            <MudCard>
                <MudForm @ref="form" Model="@_bookingForm" Validation="@(BookingValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudSelect T="Guid" @bind-Value="_bookingForm.BerthId" For="() => _bookingForm.BerthId"
                               Label="@Localization["BookingFormPage_BerthTab_Berth_Label"]"
                               Text="@Localization["BookingFormPage_BerthTab_Berth_Text"]">
                        @foreach (var berth in _berths)
                        {
                            <MudSelectItem T="Guid" Value="@berth.Id">
                                <div class="d-flex flex-column gap-1 ma-0 pa-0">
                                    <MudText Typo="Typo.subtitle1">
                                        @Localization["BookingFormPage_BerthTab_DisplayName"]:
                                        @berth.DisplayName
                                    </MudText>
                                    <MudText Typo="Typo.subtitle2">
                                        @Localization["BookingFormPage_BerthTab_Description"]:
                                        @berth.Description
                                    </MudText>
                                    <MudText Typo="Typo.subtitle1">
                                        @Localization["BookingFormPage_BerthTab_Price"]:
                                        @berth.Price
                                    </MudText>

                                </div>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                </MudForm>
                <MudCardActions Class="d-flex justify-space-between flex-grow-1 gap-4" Style="width: 100%">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               @onclick="backHarborTab">
                        @Localization["BookingFormPage_BerthTab_BackButton"]
                    </MudButton>
                    @if (!_bookingForm.BerthId.Equals(Guid.Empty))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   @onclick="nextDateTab">
                            @Localization["BookingFormPage_BerthTab_NextButton"]
                        </MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudTabPanel>
<MudTabPanel Text="@Localization["BookingFormPage_DateTab_Title"]" Disabled="isDisabledDateTab">
    <MudGrid>
        <MudItem xs="12" sm="7" Class="mx-auto pa-6">
            <MudCard>
                <MudForm @ref="form" Model="@_bookingForm" Validation="@(BookingValidator.ValidateValue)" ValidationDelay="0">
                    <MudCardContent>
                        <MudText Typo="Typo.h6">
                            @Localization["BookingFormPage_DateTab_StartDate"]:
                        </MudText>
                        <MudPaper Elevation="0">
                            <MudDatePicker Label="@Localization["BookingFormPage_DateTab_SelectStartDate"]"
                                           @bind-Date="@_bookingForm.StartDate" For="() => _bookingForm.StartDate"
                                           IsDateDisabledFunc="CheckDateDisabled"
                                           Clearable="true"/>

                        </MudPaper>
                        <MudText Typo="Typo.h6">
                            @Localization["BookingFormPage_DateTab_EndDate"]:
                        </MudText>
                        <MudPaper Elevation="0">
                            <MudDatePicker Label="@Localization["BookingFormPage_DateTab_SelectEndDate"]"
                                           @bind-Date="@_bookingForm.EndDate" For="() => _bookingForm.EndDate"
                                           IsDateDisabledFunc="CheckDateDisabled"
                                           Clearable="true"/>
                        </MudPaper>

                    </MudCardContent>
                </MudForm>
                <MudCardActions Class="d-flex justify-space-between flex-grow-1 gap-4" Style="width: 100%">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               @onclick="backBerthTab">
                        @Localization["BookingFormPage_DateTab_BackButton"]
                    </MudButton>
                    @if (_bookingForm.StartDate.HasValue 
                         && _bookingForm.EndDate.HasValue && form.IsValid)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   @onclick="nextServicesTab">
                            @Localization["BookingFormPage_DateTab_NextButton"]
                        </MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudTabPanel>
<MudTabPanel Text="@Localization["BookingFormPage_ServicesTab_Title"]" Disabled="isDisabledServicesTab">
    <MudGrid>
        <MudItem xs="12" sm="7" Class="mx-auto pa-6">
            <MudCard>
                <MudForm @ref="form" Model="@_bookingForm" Validation="@(BookingValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudSelect T="ServicePreviewDto" @bind-SelectedValues="_bookingForm.AdditionalServices"
                               Label="@Localization["BookingFormPage_ServicesTab_Services_Label"]"
                               Text="@Localization["BookingFormPage_ServicesTab_Services_Text"]"
                               MultiSelection="true" Comparer="@servicePreviewDtoComparer">
                        @foreach (var service in _services)
                        {
                            <MudSelectItem T="ServicePreviewDto" Value="@service">
                                <div class="d-flex flex-column gap-1 ma-0 pa-0">
                                    <MudText Typo="Typo.subtitle1">
                                        @Localization["BookingFormPage_ServicesTab_DisplayName"]:
                                        @service.DisplayName
                                    </MudText>
                                    <MudText Typo="Typo.subtitle2">
                                        @Localization["BookingFormPage_ServicesTab_Description"]:
                                        @service.Description
                                    </MudText>
                                    <MudText Typo="Typo.subtitle1">
                                        @Localization["BookingFormPage_ServicesTab_Price"]:
                                        @service.Price
                                    </MudText>
                                </div>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
                </MudForm>
                <MudCardActions>
                    @if (_createBookingErrorAlertVisibile)
                    {
                        <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                  CloseIconClicked="@(() => { _createBookingError = ""; _createBookingErrorAlertVisibile = false; })">
                            @Localization["BookingFormPage_ErrorAlert"]:
                            @_createBookingError
                        </MudAlert>
                    }
                    <MudPaper Class="d-flex justify-space-between flex-grow-1 gap-4" Style="width: 100%">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   @onclick="backDateTab">
                            @Localization["BookingFormPage_ServicesTab_BackButton"]
                        </MudButton>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   @onclick="bookingSave">
                            @if (string.IsNullOrEmpty(Id))
                            {
                               @Localization["BookingFormPage_CreateButton"] 
                            }
                            else
                            {
                                @Localization["BookingFormPage_EditButton"] 
                            }
                        </MudButton>
                    </MudPaper>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudTabPanel>

</MudTabs>

@code {
    [Parameter]
    public string Id { get; set; }

    private MudForm form;
    private BookingForm _bookingForm = new BookingForm
    {
        AdditionalServices = new List<ServicePreviewDto>()
    };

    private BookingEditDataDto _booking = new BookingEditDataDto();
    private List<ShipPreviewDataDto> _ships = new List<ShipPreviewDataDto>();
    private List<HarborPreviewDataDto> _harbors = new List<HarborPreviewDataDto>();
    private List<BerthPreviewDataDto> _berths = new List<BerthPreviewDataDto>();
    private List<ServicePreviewDto> _services = new List<ServicePreviewDto>();
    private List<ShipTypeDto> _shipTypes = new List<ShipTypeDto>();
    private List<BookingDates> _bookings = new List<BookingDates>();

    private IEqualityComparer<ServicePreviewDto> servicePreviewDtoComparer = EqualityComparerFactory
        .Create<ServicePreviewDto>(
            x => x.Id.GetHashCode(),
            (x, y) => x.Id.Equals(y.Id));

    private bool isDisabledShipTab = false;
    private bool isDisabledHarborTab = true;
    private bool isDisabledBerthTab = true;
    private bool isDisabledDateTab = true;
    private bool isDisabledServicesTab = true;

    private bool _createBookingErrorAlertVisibile;
    private string _createBookingError = "";

    private int _activePanel = 0;

    private bool CheckDateDisabled(DateTime date)
    {
        if (_booking.StartDate.Date == date.Date || _booking.EndDate.Date == date.Date)
        {
            return false;
        }
        
        var isDisabled = _bookings.Any(x =>
            x.StartDate.Date <= date.Date
            && x.EndDate.Date >= date.Date);

        isDisabled = isDisabled || date.Date <= DateTime.Now.Date;
        
        if (_bookingForm.StartDate.HasValue)
        {
            var endLimit = _bookings.FirstOrDefault(x => x.EndDate.Date > _bookingForm.StartDate.Value.Date);
            
            if (endLimit != null)
            {
                isDisabled = isDisabled || endLimit.EndDate < date.Date || _bookingForm.StartDate.Value.Date > date.Date;
            }
        }

        if (_bookingForm.EndDate.HasValue)
        {
            var startLimit = _bookings.LastOrDefault(x => x.StartDate.Date < _bookingForm.EndDate.Value.Date);
            
            if (startLimit != null)
            {
                isDisabled = isDisabled || startLimit.StartDate > date.Date || _bookingForm.EndDate.Value.Date < date.Date;
            }
        }
        
        return isDisabled;
    }

    private async Task ExcludeDateTimeRange()
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.PostAsJsonAsync(ApiRoutes.Booking.GetReservedDates, new BookingsFilter
        {
            HarborId = _bookingForm.HarborId,
            BerthId = _bookingForm.BerthId,
            ShipId = _bookingForm.ShipId
        });

        _bookings = await response.Content.ReadFromJsonAsync<List<BookingDates>>();

        _bookings = _bookings.OrderBy(x => x.StartDate).ThenBy(x => x.EndDate).ToList();

        StateHasChanged();
    }

    private async Task bookingSave()
    {
        form.Validate();

        if (!form.IsValid)
        {
            _createBookingErrorAlertVisibile = true;
            _createBookingError = "";
            form.Errors.ToList().ForEach(x => _createBookingError += "\n\t" + x);
        }
        
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        HttpResponseMessage response;
        var booking = new BookingDataDto()
        {
            AdditionalServices = _bookingForm.AdditionalServices.ToList(),
            BerthId = _bookingForm.BerthId,
            ShipId = _bookingForm.ShipId,
            EndDate = _bookingForm.EndDate.Value,
            StartDate = _bookingForm.StartDate.Value,
            Id = string.IsNullOrEmpty(Id) ? Guid.NewGuid() : Guid.Parse(Id)
        };
        
        if (string.IsNullOrEmpty(Id))
        {
            response = await Client.PostAsJsonAsync(ApiRoutes.Booking.Controller, booking);
        }
        else
        {
            response = await Client.PutAsJsonAsync(ApiRoutes.Booking.Controller, booking);
        }
        
        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo(
            string.Format("{0}/{1}",
                PageNavigateConstants.BookingHistoryPage,
                (int)BookingHistoryPageType.OwnBookings));
        }

        _createBookingError = await response.Content.ReadAsStringAsync();
        _createBookingErrorAlertVisibile = true;
        
        StateHasChanged();
    }
    
    private async Task nextHarborTab()
    {
        form.Validate();

        if (!form.IsValid)
        {
            return;
        }

        _activePanel = 1;
        isDisabledShipTab = true;
        isDisabledHarborTab = false;
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.PostAsJsonAsync(ApiRoutes.Harbor.SuitableHarbors,
            _shipTypes.FirstOrDefault(t => t.TypeName.Equals(
                _ships.FirstOrDefault(x => x.Id
                    .Equals(_bookingForm.ShipId)).ShipTypeName)));
        
        _harbors = await response.Content.ReadFromJsonAsync<List<HarborPreviewDataDto>>();

        if (!_harbors.Any(x => x.Id.Equals(_bookingForm.HarborId)))
        {
            _bookingForm.HarborId = Guid.Empty;
        }

        StateHasChanged();
    }
    
    private async Task nextBerthTab()
    {
        form.Validate();

        if (!form.IsValid)
        {
            return;
        }
        
        _activePanel = 2;
        isDisabledHarborTab = true;
        isDisabledBerthTab = false;
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.PostAsJsonAsync(ApiRoutes.Berth.SuitableBerth,
                           new SuitableBerthSearchModel()
                           {
                               ShipType = _shipTypes.FirstOrDefault(t => t.TypeName.Equals(
                                   _ships.FirstOrDefault(x => x.Id
                                       .Equals(_bookingForm.ShipId)).ShipTypeName)),
                               HarborId = _bookingForm.HarborId
                           });
        
        _berths = await response.Content.ReadFromJsonAsync<List<BerthPreviewDataDto>>();
        
        if (!_berths.Any(x => x.Id.Equals(_bookingForm.BerthId)))
        {
            _bookingForm.BerthId = Guid.Empty;
        }
        
        StateHasChanged();
    }
    
    private async Task nextDateTab()
    {
        form.Validate();

        if (!form.IsValid)
        {
            return;
        }
        
        _activePanel = 3;
        isDisabledBerthTab = true;
        isDisabledDateTab = false;
        await ExcludeDateTimeRange();

        if (_bookingForm.StartDate.Equals(DateTime.MinValue))
        {
            _bookingForm.StartDate = DateTime.Now;
        }
        
        if (_bookingForm.EndDate.Equals(DateTime.MinValue))
        {
            _bookingForm.EndDate = DateTime.Now;
        }

        StateHasChanged();
    }
    
    private async Task nextServicesTab()
    {
        form.Validate();

        if (!form.IsValid)
        {
            return;
        }
        
        _activePanel = 4;
        isDisabledDateTab = true;
        isDisabledServicesTab = false;
        
        var response = await Client.GetAsync(ApiRoutes.Service.Controller + "?id=" + _bookingForm.HarborId);
        
        _services = await response.Content.ReadFromJsonAsync<List<ServicePreviewDto>>();

        _bookingForm.AdditionalServices = _bookingForm.AdditionalServices
            .Where(x => _services.Any(y => y.Id.Equals(x.Id)));
        
        StateHasChanged();
    }
    
    private async Task backDateTab()
    {
        _activePanel = 3;
        isDisabledServicesTab = true;
        isDisabledDateTab = false;
        
        await ExcludeDateTimeRange();

        StateHasChanged();
    }
    
    private async Task backBerthTab()
    {
        _activePanel = 2;
        isDisabledDateTab = true;
        isDisabledBerthTab = false;

        StateHasChanged();
    }
    
    private async Task backHarborTab()
    {
        _activePanel = 1;
        isDisabledBerthTab = true;
        isDisabledHarborTab = false;

        StateHasChanged();
    }
    
    private async Task backShipTab()
    {
        _activePanel = 0;
        isDisabledHarborTab = true;
        isDisabledShipTab = false;

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.GetAsync(ApiRoutes.Account.Controller);

        var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

        if (userDto == null)
        {
            await LocalStorageService.RemoveItemAsync("token");
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        response = await Client.GetAsync(ApiRoutes.Ship.Controller + "?username=" + userDto.Username);

        _ships = await response.Content.ReadFromJsonAsync<List<ShipPreviewDataDto>>();
        
        response = await Client.GetAsync(ApiRoutes.ShipType.Controller);

        _shipTypes = await response.Content.ReadFromJsonAsync<List<ShipTypeDto>>();

        if (!string.IsNullOrEmpty(Id))
        {
            response = await Client.GetAsync(ApiRoutes.Booking.ById + "?id=" + Id);

            if (!response.IsSuccessStatusCode)
            {
                var parameters = new DialogParameters();
                var options = new DialogOptions { CloseOnEscapeKey = true };
                
                parameters.Add("Error", await response.Content.ReadAsStringAsync());
                    
                await (await DialogService.ShowAsync<ErrorDialog>(
                    Localization["BookingFormPage_ErrorDialog_Title"],
                    parameters, options)).Result;
                
                NavManager.NavigateTo(
                    string.Format("{0}/{1}",
                        PageNavigateConstants.BookingHistoryPage,
                        (int)BookingHistoryPageType.OwnBookings));
            }
            
            _booking = await response.Content.ReadFromJsonAsync<BookingEditDataDto>();

            _bookingForm.StartDate = _booking.StartDate;
            _bookingForm.EndDate = _booking.EndDate;
            _bookingForm.AdditionalServices = _booking.AdditionalServices;
            _bookingForm.BerthId = _booking.BerthId ?? Guid.Empty;
            _bookingForm.ShipId = _booking.ShipId ?? Guid.Empty;
            _bookingForm.HarborId = _booking.HarborId ?? Guid.Empty;

            StateHasChanged();
        }
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}