@page "/SubscriptionsManagePage"
@using System.Globalization
@using System.Net.Http.Headers
@using Domain.Dtos
@using IoC.Constants
@using UI.FormEntities
@using UI.FormEntities.Admin
@using UI.Validators.Admin
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject NavigationManager NavManager
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject SubscriptionValidator SubscriptionValidator
@inject IDialogService DialogService

<NavBar/>
<MudTabs Elevation="2" Rounded="true" PanelClass="pa-6" Centered="true" ActivePanelIndex="@_activeTab">
    <MudTabPanel @onclick="@(() => switchTab(0))" Text="@Localization["SubscriptionsManagePage_ListTab_Title"]">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                <MudCard>
                    <MudPaper Class="d-flex flex-column flex-grow-1 gap-4 ma-2 pa-2" Elevation="0">
                        @foreach (var subscription in _subscriptions.Subscriptions)
                        {
                            <MudPaper Class="d-flex flex-row flex-grow-1 gap-2 pa-2" MaxWidth="400" Elevation="1">
                                <MudPaper Class="d-flex flex-column flex-grow-1 gap-2" Elevation="0">
                                    <MudText Typo="@Typo.h6">
                                        @Localization["SubscriptionsManagePage_ListTab_DisplayName"]:
                                        @subscription.DisplayName
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle2">
                                        @Localization["SubscriptionsManagePage_ListTab_Description"]:
                                        @subscription.Description
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle2">
                                        @Localization["SubscriptionsManagePage_ListTab_MaxHarborAmount"]:
                                        @subscription.MaxHarborAmount
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle2">
                                        @Localization["SubscriptionsManagePage_ListTab_TaxOnBooking"]:
                                        @subscription.TaxOnBooking%
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle2">
                                        @Localization["SubscriptionsManagePage_ListTab_TaxOnServices"]:
                                        @subscription.TaxOnServices%
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle2">
                                        @Localization["SubscriptionsManagePage_ListTab_Price"]:
                                        @subscription.Price$
                                    </MudText>
                                    <MudText Typo="@Typo.subtitle2">
                                        @Localization["SubscriptionsManagePage_ListTab_SubscriberAmount"]:
                                        @subscription.SubscriberAmount
                                    </MudText>
                                    
                                </MudPaper>
                                <MudPaper Class="d-flex flex-column align-center gap-2" MaxWidth="400" Elevation="0">
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning"
                                               @onclick="() => subscriptionEditAction(subscription)" FullWidth="true">
                                        @Localization["SubscriptionsManagePage_ListTab_EditButton"]
                                    </MudButton>
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error"
                                               @onclick="() => subscriptionDeleteAction(subscription)" FullWidth="true">
                                        @Localization["SubscriptionsManagePage_ListTab_DeleteButton"]
                                    </MudButton>
                                </MudPaper>
                            </MudPaper>
                        }
                    </MudPaper>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel @onclick="@(() => switchTab(1))" Text="@Localization["SubscriptionsManagePage_CreateTab_Title"]">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                <MudCard>
                    <MudForm @ref="createForm" Model="@_subscriptionFormCreate" Validation="@(SubscriptionValidator.ValidateValue)" ValidationDelay="0">
                        <MudCardContent>
                            <MudTextField Label="@Localization["SubscriptionsManagePage_CreateTab_DisplayNameLabel"]"
                                          HelperText="@Localization["SubscriptionsManagePage_CreateTab_DisplayNameHelperText"]"
                                          Class="mt-3"
                                          @bind-Value="_subscriptionFormCreate.DisplayName" For="@(() => _subscriptionFormCreate.DisplayName)"/>
                            <MudTextField Label="@Localization["SubscriptionsManagePage_CreateTab_DescriptionLabel"]"
                                          HelperText="@Localization["SubscriptionsManagePage_CreateTab_DescriptionHelperText"]"
                                          Class="mt-3"
                                          @bind-Value="_subscriptionFormCreate.Description" For="@(() => _subscriptionFormCreate.Description)"/>
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_CreateTab_MaxHarborAmountLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_CreateTab_MaxHarborAmountHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormCreate.MaxHarborAmount" For="@(() => _subscriptionFormCreate.MaxHarborAmount)" />
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_CreateTab_TaxOnBookingLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_CreateTab_TaxOnBookingHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormCreate.TaxOnBooking" For="@(() => _subscriptionFormCreate.TaxOnBooking)" />
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_CreateTab_TaxOnServicesLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_CreateTab_TaxOnServicesHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormCreate.TaxOnServices" For="@(() => _subscriptionFormCreate.TaxOnServices)" />
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_CreateTab_PriceLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_CreateTab_PriceHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormCreate.Price" For="@(() => _subscriptionFormCreate.Price)" />
                        </MudCardContent>
                    </MudForm>
                    <MudCardActions>
                        @if (_createSubscriptionErrorAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateSubscriptionError))">
                                @Localization["SubscriptionsManagePage_CreateTab_SubscriptionErrorAlert"]:
                                @_createSubscriptionError
                            </MudAlert>
                        }
                        @if (_createSubscriptionSuccessAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateSubscriptionSuccess))">
                                @Localization["SubscriptionsManagePage_CreateTab_SubscriptionSuccessAlert"]
                            </MudAlert>
                        }
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                   @onclick="subscriptionSave">
                            @Localization["SubscriptionsManagePage_CreateTab_SubscriptionCreateButton"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel @onclick="@(() => switchTab(2))" Text="@Localization["SubscriptionsManagePage_EditTab_Title"]" Disabled="!didEditTabOpen">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                <MudCard>
                    <MudForm @ref="editForm" Model="@_subscriptionFormEdit" Validation="@(SubscriptionValidator.ValidateValue)" ValidationDelay="0">
                        <MudCardContent>
                            <MudTextField Label="@Localization["SubscriptionsManagePage_EditTab_DisplayNameLabel"]"
                                          HelperText="@Localization["SubscriptionsManagePage_EditTab_DisplayNameHelperText"]"
                                          Class="mt-3"
                                          @bind-Value="_subscriptionFormEdit.DisplayName" For="@(() => _subscriptionFormEdit.DisplayName)"/>
                            <MudTextField Label="@Localization["SubscriptionsManagePage_EditTab_DescriptionLabel"]"
                                          HelperText="@Localization["SubscriptionsManagePage_EditTab_DescriptionHelperText"]"
                                          Class="mt-3"
                                          @bind-Value="_subscriptionFormEdit.Description" For="@(() => _subscriptionFormEdit.Description)"/>
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_EditTab_MaxHarborAmountLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_EditTab_MaxHarborAmountHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormEdit.MaxHarborAmount" For="@(() => _subscriptionFormEdit.MaxHarborAmount)" />
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_EditTab_TaxOnBookingLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_EditTab_TaxOnBookingHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormEdit.TaxOnBooking" For="@(() => _subscriptionFormEdit.TaxOnBooking)" />
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_EditTab_TaxOnServicesLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_EditTab_TaxOnServicesHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormEdit.TaxOnServices" For="@(() => _subscriptionFormEdit.TaxOnServices)" />
                            <MudNumericField Label="@Localization["SubscriptionsManagePage_EditTab_PriceLabel"]"
                                             HelperText="@Localization["SubscriptionsManagePage_EditTab_PriceHelperText"]"
                                             Class="mt-3"
                                             @bind-Value="_subscriptionFormEdit.Price" For="@(() => _subscriptionFormEdit.Price)" />
                        </MudCardContent>
                    </MudForm>
                    <MudCardActions>
                        @if (_createSubscriptionErrorAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.EditSubscriptionError))">
                                @Localization["SubscriptionsManagePage_EditTab_SubscriptionErrorAlert"]:
                                @_editSubscriptionError
                            </MudAlert>
                        }
                        @if (_editSubscriptionSuccessAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.EditSubscriptionSuccess))">
                                @Localization["SubscriptionsManagePage_EditTab_SubscriptionSuccessAlert"]
                            </MudAlert>
                        }
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                   @onclick="subscriptionEdit">
                            @Localization["SubscriptionsManagePage_EditTab_SubscriptionCreateButton"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
        
    </MudTabPanel>
</MudTabs>


@code {
    private MudForm createForm;
    private MudForm editForm;
    
    private AllSubscriptionsDto _subscriptions = new AllSubscriptionsDto {Subscriptions = new List<SubscriptionDto>()};
    private SubscriptionForm _subscriptionFormCreate = new SubscriptionForm();
    private SubscriptionForm _subscriptionFormEdit = new SubscriptionForm();
    private bool _createSubscriptionErrorAlertVisibile = false;
    private bool _createSubscriptionSuccessAlertVisibile = false;
    private string _createSubscriptionError = "";
    private bool _editSubscriptionErrorAlertVisibile = false;
    private bool _editSubscriptionSuccessAlertVisibile = false;
    private string _editSubscriptionError = "";
    private int _activeTab = 0;
    private bool didEditTabOpen = false;
    private string username = "";

    private async Task closeAlert(AlertDestination alertDirection)
    {
        switch (alertDirection)
        {
            case AlertDestination.CreateSubscriptionError:
                _createSubscriptionError = "";
                _createSubscriptionErrorAlertVisibile = false;
                break;
            case AlertDestination.CreateSubscriptionSuccess:
                _createSubscriptionSuccessAlertVisibile = false;
                break;
            case AlertDestination.EditSubscriptionError:
                _editSubscriptionError = "";
                _editSubscriptionErrorAlertVisibile = false;
                break;
            case AlertDestination.EditSubscriptionSuccess:
                _editSubscriptionSuccessAlertVisibile = false;
                break;
        }
    }

    private void switchTab(int i)
    {
        _activeTab = i;
        StateHasChanged();
    }

    private async Task subscriptionSave()
    {
        createForm.Validate();

        if (!createForm.IsValid)
        {
            return;
        }
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);
        
        var response = await Client.PostAsJsonAsync(ApiRoutes.Subscription.Controller, new SubscriptionDto()
        {
            Description = _subscriptionFormCreate.Description,
            Id = _subscriptionFormCreate.Id,
            DisplayName = _subscriptionFormCreate.DisplayName,
            MaxHarborAmount = _subscriptionFormCreate.MaxHarborAmount,
            TaxOnBooking = _subscriptionFormCreate.TaxOnBooking,
            TaxOnServices = _subscriptionFormCreate.TaxOnServices,
            Price = _subscriptionFormCreate.Price,
        });

        if (response.IsSuccessStatusCode)
        {
            _createSubscriptionError = "";
            _createSubscriptionSuccessAlertVisibile = true;
            _createSubscriptionErrorAlertVisibile = false;
        }
        else
        {
            _createSubscriptionError = await response.Content.ReadAsStringAsync();
            _createSubscriptionSuccessAlertVisibile = false;
            _createSubscriptionErrorAlertVisibile = true;
        }
        
        response = await Client.GetAsync(string.Format("{0}?username={1}", 
            ApiRoutes.Subscription.AllSubscriptions,
            username));
        
        _subscriptions = await response.Content.ReadFromJsonAsync<AllSubscriptionsDto>();
        
        StateHasChanged();
    }

    private async Task subscriptionEdit()
    {
        editForm.Validate();

        if (!editForm.IsValid)
        {
            return;
        }
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);
        
        var response = await Client.PutAsJsonAsync(ApiRoutes.Subscription.Controller, new SubscriptionDto()
        {
            Description = _subscriptionFormEdit.Description,
            Id = _subscriptionFormEdit.Id,
            DisplayName = _subscriptionFormEdit.DisplayName,
            MaxHarborAmount = _subscriptionFormEdit.MaxHarborAmount,
            TaxOnBooking = _subscriptionFormEdit.TaxOnBooking,
            TaxOnServices = _subscriptionFormEdit.TaxOnServices,
            Price = _subscriptionFormEdit.Price,
        });

        if (response.IsSuccessStatusCode)
        {
            _editSubscriptionError = "";
            _editSubscriptionSuccessAlertVisibile = true;
            _editSubscriptionErrorAlertVisibile = false;
        }
        else
        {
            _editSubscriptionError = await response.Content.ReadAsStringAsync();
            _editSubscriptionSuccessAlertVisibile = false;
            _editSubscriptionErrorAlertVisibile = true;
        }
        
        response = await Client.GetAsync(string.Format("{0}?username={1}", 
            ApiRoutes.Subscription.AllSubscriptions,
            username));
        
        _subscriptions = await response.Content.ReadFromJsonAsync<AllSubscriptionsDto>();
        
        StateHasChanged();
    }

    private async Task subscriptionEditAction(SubscriptionDto subscription)
    {
        _subscriptionFormEdit = new SubscriptionForm()
        {
            Description = subscription.Description,
            Id = subscription.Id,
            DisplayName = subscription.DisplayName,
            MaxHarborAmount = subscription.MaxHarborAmount,
            TaxOnBooking = subscription.TaxOnBooking,
            TaxOnServices = subscription.TaxOnServices,
            Price = subscription.Price,
        };
        
        didEditTabOpen = true;
        _activeTab = 2;
        StateHasChanged();
    }
    
    private async Task subscriptionDeleteAction(SubscriptionDto subscription)
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var confirmationResult = await (await DialogService.ShowAsync<DeleteDialog>(
            Localization["SubscriptionsManagePage_DeleteDialog_Title"],
            parameters, options)).Result;

        if (!confirmationResult.Cancelled && bool.TryParse(confirmationResult.Data.ToString(), out bool resultBool))
        {
            var response = await Client.DeleteAsync(string.Format(
                "{0}?id={1}",
                ApiRoutes.Subscription.Controller,
                subscription.Id));

            if (!response.IsSuccessStatusCode)
            {
                await (await DialogService.ShowAsync<ErrorDialog>(
                    Localization["SubscriptionsManagePage_ErrorDialog_Title"],
                    parameters, options)).Result;
            }

            response = await Client.GetAsync(string.Format("{0}?username={1}", 
                ApiRoutes.Subscription.AllSubscriptions,
                username));
        
            _subscriptions = await response.Content.ReadFromJsonAsync<AllSubscriptionsDto>();
            
            if (subscription.Id.Equals(_subscriptionFormEdit.Id))
            {
                didEditTabOpen = false;
                _activeTab = 0;
            }

            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.GetAsync(ApiRoutes.Account.Controller);

        var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

        if (userDto == null)
        {
            await LocalStorageService.RemoveItemAsync("token");
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }
        
        username = userDto.Username;

        response = await Client.GetAsync(string.Format("{0}?username={1}", 
            ApiRoutes.Subscription.AllSubscriptions,
            username));
        
        _subscriptions = await response.Content.ReadFromJsonAsync<AllSubscriptionsDto>();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}