@page "/PaymentHistory"
@using System.Globalization
@using System.Net.Http.Headers
@using IoC.Constants
@using Domain.Dtos
@inject NavigationManager NavManager
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService

<NavBar/>

<MudTabs Elevation="1" Rounded="true" PanelClass="pa-1" Centered="true">
    <MudTabPanel Text="@Localization["PaymentHistoryPage_SubscriptionChecksTab_Title"]">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-2">
                <MudCard>
                    <MudPaper Class="d-flex flex-column flex-grow-1 gap-2 ma-2 pa-2" Elevation="0">
                        @foreach (var checkDto in _subscriptionChecks)
                        {
                            <MudPaper Class="d-flex flex-column flex-grow-1 gap-2 pa-1" Elevation="1">
                                <MudPaper Class="d-flex flex-row justify-space-between flex-grow-1 gap-2" Elevation="0">
                                    <MudText Typo="@Typo.subtitle1">@checkDto.Date</MudText>
                                    <MudText Typo="@Typo.subtitle1">
                                        @Localization["PaymentHistoryPage_SubscriptionChecksTab_TotalCostText"]:
                                        @checkDto.TotalCost$
                                    </MudText>
                                </MudPaper>
                                <MudText Typo="@Typo.subtitle2">@checkDto.Description</MudText>
                                <MudText Typo="@Typo.subtitle2">
                                    @Localization["PaymentHistoryPage_SubscriptionChecksTab_BankTransactionIdText"]:
                                    @checkDto.BankTransactionId
                                </MudText>
                            </MudPaper>
                        }
                        @if (!_subscriptionChecks.Any())
                        {
                            <MudText Typo="@Typo.subtitle1" Align="Align.Center" Style="width: 100%">
                                @Localization["PaymentHistoryPage_SubscriptionChecksTab_EmptyListText"]
                            </MudText>
                        }
                    </MudPaper>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
    <MudTabPanel Text="@Localization["PaymentHistoryPage_BookingChecksTab_Title"]">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-2">
                <MudCard>
                    <MudPaper Class="d-flex flex-column flex-grow-1 gap-2 ma-2 pa-2" Elevation="0">
                        @foreach (var checkDto in _bookingChecks)
                        {
                            <MudPaper Class="d-flex flex-column flex-grow-1 gap-2 pa-1" Elevation="1">
                                <MudPaper Class="d-flex flex-row justify-space-between flex-grow-1 gap-2" Elevation="0">
                                    <MudText Typo="@Typo.subtitle1">@checkDto.Date</MudText>
                                    <MudText Typo="@Typo.subtitle1">
                                        @Localization["PaymentHistoryPage_BookingChecksTab_TotalCostText"]:
                                        @checkDto.TotalCost$
                                    </MudText>
                                </MudPaper>
                                <MudText Typo="@Typo.subtitle2">@checkDto.Description</MudText>
                                <MudText Typo="@Typo.subtitle2">
                                    @Localization["PaymentHistoryPage_BookingChecksTab_BankTransactionIdText"]:
                                    @checkDto.BankTransactionId
                                </MudText>
                            </MudPaper>
                        }
                        @if (!_bookingChecks.Any())
                        {
                            <MudText Typo="@Typo.subtitle1" Align="Align.Center" Style="width: 100%">
                                @Localization["PaymentHistoryPage_BookingChecksTab_EmptyListText"]
                            </MudText>
                        }
                    </MudPaper>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>

@code {
    private List<SubscriptionCheckDto> _subscriptionChecks { get; set; } = new List<SubscriptionCheckDto>();
    private List<BookingCheckDataDto> _bookingChecks { get; set; } = new List<BookingCheckDataDto>();

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.GetAsync(ApiRoutes.Account.Controller);

        var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

        if (userDto == null)
        {
            await LocalStorageService.RemoveItemAsync("token");
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        response = await Client.GetAsync(ApiRoutes.SubscriptionCheck.Controller + "?username=" + userDto.Username);

        _subscriptionChecks = await response.Content.ReadFromJsonAsync<List<SubscriptionCheckDto>>();

        response = await Client.GetAsync(ApiRoutes.BookingCheck.Controller + "?username=" + userDto.Username);

        _bookingChecks = await response.Content.ReadFromJsonAsync<List<BookingCheckDataDto>>();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }

}