@page "/HarborFormPage"
@page "/HarborFormPage/{Longitude:double?}/{Latitude:double?}"

@using UI.Validators.Harbor
@using UI.FormEntities
@using System.Globalization
@using System.Net.Http.Headers
@using IoC.Constants
@using Domain.Dtos
@using UI.FormEntities.Harbor
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject NavigationManager NavManager
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject HarborValidator HarborValidator

<NavBar/>

<MudTabs Elevation="2" Rounded="true" PanelClass="pa-6" Centered="true">
    <MudTabPanel Text="@Localization["HarborFormPage_Title"]">
        <MudGrid>
            <MudItem xs="12" sm="7" Class="mx-auto pa-6">
                @if (_lastCreatedHarborId.HasValue)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-2"
                               OnClick="toHarborPage">
                        @Localization["HarborFormPage_ToHarborPageButton"]
                    </MudButton>
                }
                <MudCard>
                    <MudForm @ref="form" Model="@_harborForm" Validation="@(HarborValidator.ValidateValue)" ValidationDelay="0">
                        <MudCardContent>
                            <MudTextField Label="@Localization["HarborFormPage_Label_DisplayName"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_DisplayName"]"
                                          Class="mt-3"
                                          @bind-Value="_harborForm.DisplayName" For="@(() => _harborForm.DisplayName)"/>
                            <MudTextField Label="@Localization["HarborFormPage_Label_Description"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_Description"]"
                                          Class="mt-3"
                                          @bind-Value="_harborForm.Description" For="@(() => _harborForm.Description)"/>
                            <MudNumericField T="double" Label="@Localization["HarborFormPage_Label_GeolocationLongitude"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_GeolocationLongitude"]"
                                          Class="mt-3" Step=".5" 
                                          @bind-Value="_harborForm.GeolocationLongitude" For="@(() => _harborForm.GeolocationLongitude)"/>
                            <MudNumericField T="double" Label="@Localization["HarborFormPage_Label_GeolocationLatitude"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_GeolocationLatitude"]"
                                          Class="mt-3" Step=".5"
                                          @bind-Value="_harborForm.GeolocationLatitude" For="@(() => _harborForm.GeolocationLatitude)"/>
                            <MudTextField Label="@Localization["HarborFormPage_Label_BIC"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_BIC"]"
                                          Class="mt-3"
                                          @bind-Value="_harborForm.BIC" For="@(() => _harborForm.BIC)"/>
                            <MudTextField Label="@Localization["HarborFormPage_Label_IBAN"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_IBAN"]"
                                          Class="mt-3"
                                          @bind-Value="_harborForm.IBAN" For="@(() => _harborForm.IBAN)"/>
                            <MudTextField Label="@Localization["HarborFormPage_Label_SupportEmail"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_SupportEmail"]"
                                          Class="mt-3"
                                          @bind-Value="_harborForm.SupportEmail" For="@(() => _harborForm.SupportEmail)"/>
                            <MudTextField Label="@Localization["HarborFormPage_Label_SupportPhoneNumber"]"
                                          HelperText="@Localization["HarborFormPage_HelperText_SupportPhoneNumber"]"
                                          Class="mt-3"
                                          @bind-Value="_harborForm.SupportPhoneNumber" For="@(() => _harborForm.SupportPhoneNumber)"/>
                            
                        </MudCardContent>
                    </MudForm>
                    <MudCardActions>
                        @if (_createHarborErrorAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateHarborError))">
                                @Localization["HarborFormPage_ErrorAlert"]:
                                @_createHarborError
                            </MudAlert>
                        }
                        @if (_createHarborSuccessAlertVisibile)
                        {
                            <MudAlert Severity="Severity.Success" ContentAlignment="HorizontalAlignment.Center" ShowCloseIcon="true"
                                      CloseIconClicked="(() => closeAlert(AlertDestination.CreateHarborSuccess))">
                                @Localization["HarborFormPage_SuccessAlert"]
                            </MudAlert>
                        }
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                                   @onclick="harborSave">
                            @Localization["HarborFormPage_CreateButton"]
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudTabPanel>
</MudTabs>
@code {
    [Parameter]
    public double? Latitude { get; set; }
    
    [Parameter]
    public double? Longitude { get; set; }
    
    private MudForm form;
    private HarborForm _harborForm { get; set; } = new HarborForm();
    private bool _createHarborErrorAlertVisibile = false;
    private bool _createHarborSuccessAlertVisibile = false;
    private string _createHarborError = "";
    private Guid? _lastCreatedHarborId = null;

    private async Task closeAlert(AlertDestination alertDirection)
    {
        switch (alertDirection)
        {
            case AlertDestination.CreateHarborError:
                _createHarborError = "";
                _createHarborErrorAlertVisibile = false;
                break;
            case AlertDestination.CreateHarborSuccess:
                _createHarborSuccessAlertVisibile = false;
                break;
        }
    }
    
    private void toHarborPage() => NavManager.NavigateTo((string.Format("{0}/{1}",
        PageNavigateConstants.HarborPage,
        _lastCreatedHarborId.Value)));
    
    private async Task harborSave()
    {
        form.Validate();
        
        if (!form.IsValid)
        {
            return;
        }
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);
        
        var response = await Client.PostAsJsonAsync(ApiRoutes.Harbor.Controller, new HarborDataDto()
        {
            DisplayName = _harborForm.DisplayName,
            Description = _harborForm.Description,
            GeolocationLatitude = _harborForm.GeolocationLatitude,
            GeolocationLongitude = _harborForm.GeolocationLongitude,
            BIC = _harborForm.BIC,
            IBAN = _harborForm.IBAN,
            SupportEmail = _harborForm.SupportEmail,
            SupportPhoneNumber = _harborForm.SupportPhoneNumber,
        });

        if (response.IsSuccessStatusCode)
        {
            _createHarborError = "";
            _createHarborSuccessAlertVisibile = true;
            _createHarborErrorAlertVisibile = false;
        }
        else
        {
            _createHarborError = await response.Content.ReadAsStringAsync();
            _createHarborSuccessAlertVisibile = false;
            _createHarborErrorAlertVisibile = true;
        }

        _lastCreatedHarborId = (await response.Content.ReadFromJsonAsync<HarborDataDto>()).Id;
        
        StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (string.IsNullOrEmpty(token))
        {
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.GetAsync(ApiRoutes.Account.Controller);

        var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

        if (userDto == null)
        {
            await LocalStorageService.RemoveItemAsync("token");
            NavManager.NavigateTo(PageNavigateConstants.IndexPage);
        }
        
        if (Longitude.HasValue)
        {
            _harborForm.GeolocationLongitude = Longitude.Value;
        }
        
        if (Latitude.HasValue)
        {
            _harborForm.GeolocationLatitude = Latitude.Value;
        }
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}