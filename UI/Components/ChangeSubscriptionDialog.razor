@using Domain.Dtos
@using System.Globalization
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization

<MudDialog>
    <DialogContent>
        <MudPaper Class="d-flex flex-column flex-grow-1 gap-2" Elevation="0">
            <MudText Typo="@Typo.h6">@SubscriptionChangeDto.NewSubscription.DisplayName</MudText>
            <MudText Typo="@Typo.subtitle2">@SubscriptionChangeDto.NewSubscription.Description</MudText>
            <MudText Typo="@Typo.subtitle2">
                @Localization["SubscriptionPage_MaxHarborAmountText"]:
                @SubscriptionChangeDto.NewSubscription.MaxHarborAmount
            </MudText>
            <MudText Typo="@Typo.subtitle2">
                @Localization["SubscriptionPage_TaxOnBookingText"]:
                @SubscriptionChangeDto.NewSubscription.TaxOnBooking%
            </MudText>
            <MudText Typo="@Typo.subtitle2">
                @Localization["SubscriptionPage_TaxOnServicesText"]:
                @SubscriptionChangeDto.NewSubscription.TaxOnServices%
            </MudText>
            <MudText Typo="@Typo.subtitle2">
                @Localization["SubscriptionPage_ChangeSubscriptionCostText"]:
                @SubscriptionChangeDto.ChangeCost$
            </MudText>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Warning" OnClick="Cancel">
            @Localization["SubscriptionPage_ChangeSubscriptionDialog_CancelButton"]
        </MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="Submit">
            @Localization["SubscriptionPage_ChangeSubscriptionDialog_SubmitButton"]
        </MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public SubscriptionChangeDto SubscriptionChangeDto { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    
    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}