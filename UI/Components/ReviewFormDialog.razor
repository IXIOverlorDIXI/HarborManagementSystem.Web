@using Domain.Dtos
@using System.Globalization
@using System.Net.Http.Headers
@using IoC.Constants
@using UI.FormEntities
@using UI.FormEntities.Harbor
@using UI.Validators.Review
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject ReviewValidator ReviewValidator
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

<MudDialog>
    <DialogContent>
        <MudPaper Class="d-flex flex-column flex-grow-1 gap-2 ma-2" Elevation="0">
            <MudForm @ref="form" Model="@_reviewForm" Validation="@(ReviewValidator.ValidateValue)" ValidationDelay="0">
                <MudCardContent>
                    <MudItem Class="mx-1 pa-1" Style="width: 100%">
                        <MudPaper Class="d-flex flex-row align-center gap-1" Elevation="0" >
                            <MudText Typo="@Typo.subtitle2">
                                @Localization["HarborPage_ReviewsPart_ReviewFormDialog_ReviewMark"]
                            </MudText>
                            <MudRating Class="mt-3" @bind-SelectedValue="_reviewForm.ReviewMark" 
                                       MaxValue="5"/>
                        </MudPaper>
                    </MudItem>

                    <MudTextField Label="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_ReviewBodyLabel"]"
                                  HelperText="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_ReviewBodyHelperText"]"
                                  Class="mt-3"
                                  @bind-Value="_reviewForm.ReviewBody" For="@(() => _reviewForm.ReviewBody)"/>
                    <MudTextField Label="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_ReviewPlusesLabel"]"
                                  HelperText="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_ReviewPlusesHelperText"]"
                                  Class="mt-3"
                                  @bind-Value="_reviewForm.ReviewPluses" For="@(() => _reviewForm.ReviewPluses)"/>
                    <MudTextField Label="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_ReviewMinusesLabel"]"
                                  HelperText="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_ReviewMinusesHelperText"]"
                                  Class="mt-3"
                                  @bind-Value="_reviewForm.ReviewMinuses" For="@(() => _reviewForm.ReviewMinuses)"/>
                    <MudSelect T="Guid" @bind-Value="_reviewForm.BerthId" For="() => _reviewForm.BerthId"
                               Label="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_BerthLabel"]"
                               Text="@Localization["HarborPage_ReviewsPart_ReviewFormDialog_BerthHelperText"]">
                        @foreach (var berth in _berths)
                        {
                            <MudSelectItem T="Guid" Value="@berth.Id">
                                <div class="d-flex flex-column gap-1 ma-0 pa-0">
                                    <MudText Typo="Typo.subtitle1">
                                        @Localization["HarborPage_ReviewsPart_ReviewFormDialog_BerthName"]:
                                        @berth.DisplayName
                                    </MudText>
                                    <MudText Typo="Typo.subtitle2">
                                        @Localization["HarborPage_ReviewsPart_ReviewFormDialog_BerthDescription"]:
                                        @berth.Description
                                    </MudText>
                                </div>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudCardContent>
            </MudForm>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        @if (_reviewCreateErrorAlertVisible)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center"
                      ShowCloseIcon="true" CloseIconClicked="(() => closeAlert(AlertDestination.CreateReviewError))">
                @Localization["HarborPage_ReviewsPart_CreateErrorAlert"]: @_reviewCreateFormError
            </MudAlert>
        }
        @if (_reviewEditErrorAlertVisible)
        {
            <MudAlert Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center"
                      ShowCloseIcon="true" CloseIconClicked="(() => closeAlert(AlertDestination.EditReviewError))">
                @Localization["HarborPage_HarborPhotosTab_EditErrorAlert"]: @_reviewEditFormError
            </MudAlert>
        }
        
        <MudButton Color="Color.Warning" OnClick="Cancel">
            @Localization["HarborPage_ReviewsPart_ReviewFormDialog_CancelButton"]
        </MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="Submit">
            @Localization["HarborPage_ReviewsPart_ReviewFormDialog_SubmitButton"]
        </MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ReviewDataDto Review { get; set; }
    [Parameter] public bool IsCreating { get; set; }
    [Parameter] public string Id { get; set; }

    private MudForm form;
    private ReviewForm _reviewForm = new ReviewForm();
    private List<BerthPreviewDataDto> _berths = new List<BerthPreviewDataDto>();
    
    private string _reviewCreateFormError = "";
    private bool _reviewCreateErrorAlertVisible = false;
    private string _reviewEditFormError = "";
    private bool _reviewEditErrorAlertVisible = false;

    private async Task Submit()
    {
        form.Validate();
        
        if (!form.IsValid)
        {
            return;
        }
        
        HttpResponseMessage response;
        
        var token = await LocalStorageService.GetItemAsync<string>("token");

        var review = new ReviewDataDto()
        {
            BerthId = _reviewForm.BerthId,
            Date = DateTime.Now,
            ReviewMark = _reviewForm.ReviewMark,
            ReviewBody = _reviewForm.ReviewBody,
            ReviewPluses = _reviewForm.ReviewPluses,
            ReviewMinuses = _reviewForm.ReviewMinuses,
            Id = Review.Id
        };

        if (IsCreating)
        {
            response = await Client.PostAsJsonAsync(ApiRoutes.Review.Controller, review);
        }
        else
        {
            response = await Client.PutAsJsonAsync(ApiRoutes.Review.Controller, review);
        }

        if (!response.IsSuccessStatusCode)
        {
            if (IsCreating)
            {
                _reviewCreateFormError = await response.Content.ReadAsStringAsync();
                _reviewCreateErrorAlertVisible = true;
            }
            else
            {
                _reviewEditFormError = await response.Content.ReadAsStringAsync();;
                _reviewEditErrorAlertVisible = true;
            }
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    void Cancel() => MudDialog.Cancel();
    
    private async Task closeAlert(AlertDestination alertDirection)
    {
        switch (alertDirection)
        {
            case AlertDestination.CreateReviewError:
                _reviewCreateFormError = "";
                _reviewCreateErrorAlertVisible = false;
                break;
            case AlertDestination.EditReviewError:
                _reviewEditFormError = "";
                _reviewEditErrorAlertVisible = false;
                break;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();
        
        HttpResponseMessage response;
        
        var token = await LocalStorageService.GetItemAsync<string>("token");

        if (!string.IsNullOrEmpty(token))
        {
            Client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            response = await Client.GetAsync(ApiRoutes.Account.Controller);

            var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

            if (userDto == null)
            {
                await LocalStorageService.RemoveItemAsync("token");
                NavManager.NavigateTo(PageNavigateConstants.IndexPage);
            }
        }
        
        _reviewForm = new ReviewForm()
        {
            BerthId = Review.BerthId,
            ReviewMark = Review.ReviewMark,
            ReviewBody = Review.ReviewBody,
            ReviewPluses = Review.ReviewPluses,
            ReviewMinuses = Review.ReviewMinuses,
        };
        
        response = await Client.GetAsync(ApiRoutes.Berth.Controller + "?id=" + Id);

        _berths = await response.Content.ReadFromJsonAsync<List<BerthPreviewDataDto>>();

        _reviewForm.ReviewMark = 3;
        
        StateHasChanged();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}