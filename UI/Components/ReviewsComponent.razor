@using Domain.Dtos
@using IoC.Constants
@using UI.FormEntities.Harbor
@using System.Globalization
@using System.Net.Http.Headers
@using System.Globalization
@using System.Net.Http.Headers
@using Domain.Dtos
@using IoC.Constants
@using Microsoft.AspNetCore.Components.Forms
@using UI.FormEntities
@using UI.FormEntities.Harbor
@using UI.Validators.Harbor
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject NavigationManager NavManager
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IDialogService DialogService
@inject HarborValidator HarborValidator
@inject ServiceValidator ServiceValidator
@inject IJSRuntime JSRuntime

<MudPaper Class="d-flex flex-row align-center gap-1" Elevation="0">
    <MudRating ReadOnly="true" SelectedValue="@((int)(_harborData.AverageRate))"/>
    <MudText Typo="@Typo.subtitle2">
        @Localization["HarborPage_ReviewsPart_ReviewAmountText"]:
        @_harborData.ReviewsAmount
    </MudText>
</MudPaper>

@if (!IsObjectOwner && _isAuthorized)
{
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info"
               OnClick="createReview">
        @Localization["HarborPage_ReviewsPart_CreateButton"]
    </MudButton>
}
@if (_reviews.Any())
{
    <MudTable Items="@_reviews" Dense="@false" Hover="@true" Bordered="@true" Striped="@false">
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel InitialDirection="SortDirection.Descending"
                                   SortBy="new Func<ReviewPreviewDataDto, object>(x => x.Date)">
                    @Localization["HarborPage_ReviewsPart_ReviewDate"]
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                @Localization["HarborPage_ReviewsPart_Review"]
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ReviewPreviewDataDto, object>(x => x.ReviewMark)">
                    @Localization["HarborPage_ReviewsPart_ReviewMark"]
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<ReviewPreviewDataDto, object>(x => x.DoesAuthorPay)">
                    @Localization["HarborPage_ReviewsPart_Payed"]
                </MudTableSortLabel>
            </MudTh>
            @if (_isAdmin || _reviews.Any(x=>x.IsAuthor))
            {
                <MudTh>
                    @Localization["HarborPage_ReviewsPart_Actions"]
                </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@Localization["HarborPage_ReviewsPart_ReviewDate"]">@context.Date</MudTd>
            <MudTd DataLabel="@Localization["HarborPage_ReviewsPart_Review"]">
                <MudPaper Class="d-flex flex-column gap-1" Elevation="0" Style="background-color: transparent">
                    <MudText Typo="@Typo.subtitle2">
                        @Localization["HarborPage_ReviewsPart_ReviewBody"]:
                    </MudText>
                    <MudText Typo="@Typo.caption" Class="mx-2">
                        @context.ReviewBody
                    </MudText>
                    <MudText Typo="@Typo.subtitle2">
                        @Localization["HarborPage_ReviewsPart_ReviewPluses"]:
                    </MudText>
                    <MudText Typo="@Typo.caption" Class="mx-2">
                        @context.ReviewPluses
                    </MudText>
                    <MudText Typo="@Typo.subtitle2">
                        @Localization["HarborPage_ReviewsPart_ReviewMinuses"]:
                    </MudText>
                    <MudText Typo="@Typo.caption" Class="mx-2">
                        @context.ReviewMinuses
                    </MudText>
                </MudPaper>
            </MudTd>
            <MudTd DataLabel="@Localization["HarborPage_ReviewsPart_ReviewMark"]">
                <MudRating ReadOnly="true" SelectedValue="@context.ReviewMark"/>
            </MudTd>
            <MudTd DataLabel="@Localization["HarborPage_ReviewsPart_Payed"]">
                @(context.DoesAuthorPay 
                    ? Localization["HarborPage_ReviewsPart_IsPayed"]
                    : Localization["HarborPage_ReviewsPart_NotPayed"])
            </MudTd>
            @if (_isAdmin || context.IsAuthor)
            {
                <MudTd DataLabel="@Localization["HarborPage_ReviewsPart_Actions"]">
                    @if (_isAdmin || context.IsAuthor)
                    {
                        <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Error" @onclick="() => editReview(context)"/>
                    }
                    <MudIconButton Variant="Variant.Filled" Icon="@Icons.Material.Filled.Delete" 
                                   Color="Color.Error" @onclick="() => deleteReview(context)"/>
                </MudTd>
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager/>
        </PagerContent>
    </MudTable>
}
else
{
    <MudText Typo="Typo.h5" Align="Align.Start">
        @Localization["HarborPage_ReviewsPart_EmptyData"]
    </MudText>
}

@code {

    [Parameter]
    public string Id { get; set; } = "";

    [Parameter]
    public bool IsObjectOwner { get; set; } = false;

    [Parameter]
    public ReviewsScope _Scope { get; set; } = ReviewsScope.Harbor;

    private bool _isAdmin = false;
    private bool _isAuthorized = false;
    private HarborPreviewDataDto _harborData = new HarborPreviewDataDto();
    private List<ReviewPreviewDataDto> _reviews = new List<ReviewPreviewDataDto>();
    
    private async Task createReview()
    {
        var parameters = new DialogParameters();
        parameters.Add("Review", new ReviewDataDto());
        parameters.Add("IsCreating", true);
        parameters.Add("Id", Id);
        
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var confirmationResult = await (await DialogService.ShowAsync<ReviewFormDialog>(
            Localization["HomePage_ReviewsPart_CreateDialog_Title"],
            parameters, options)).Result;
        
        HttpResponseMessage response = default;
        
        switch (_Scope)
        {
            case ReviewsScope.Berth:
                response = await Client.GetAsync(ApiRoutes.Review.ByBerth + "?id=" + Id);
                break;
            case ReviewsScope.Harbor:
                response = await Client.GetAsync(ApiRoutes.Review.ByHarbor + "?id=" + Id);
                break;
        }
        
        _reviews = await response.Content.ReadFromJsonAsync<List<ReviewPreviewDataDto>>();
        
        response = await Client.GetAsync(ApiRoutes.Harbor.ById + "?id=" + Id);

        _harborData = await response.Content.ReadFromJsonAsync<HarborPreviewDataDto>();
        
        StateHasChanged();
    }
    
    private async Task editReview(ReviewPreviewDataDto review)
    {
        var parameters = new DialogParameters();
        parameters.Add("Review", new ReviewDataDto
        {
            BerthId = review.BerthId,
            Id = review.Id,
            ReviewBody = review.ReviewBody,
            ReviewMark = review.ReviewMark,
            ReviewMinuses = review.ReviewMinuses,
            ReviewPluses = review.ReviewPluses
        });
        parameters.Add("IsCreating", false);
        parameters.Add("Id", Id);
        
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var confirmationResult = await (await DialogService.ShowAsync<ReviewFormDialog>(
            Localization["HomePage_ReviewsPart_EditDialog_Title"],
            parameters, options)).Result;

        HttpResponseMessage response = default;
        
        switch (_Scope)
        {
            case ReviewsScope.Berth:
                response = await Client.GetAsync(ApiRoutes.Review.ByBerth + "?id=" + Id);
                break;
            case ReviewsScope.Harbor:
                response = await Client.GetAsync(ApiRoutes.Review.ByHarbor + "?id=" + Id);
                break;
        }
        
        _reviews = await response.Content.ReadFromJsonAsync<List<ReviewPreviewDataDto>>();
        
        response = await Client.GetAsync(ApiRoutes.Harbor.ById + "?id=" + Id);

        _harborData = await response.Content.ReadFromJsonAsync<HarborPreviewDataDto>();

        StateHasChanged();
    }

    private async Task deleteReview(ReviewPreviewDataDto review)
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var confirmationResult = await (await DialogService.ShowAsync<DeleteDialog>(
            Localization["HomePage_ReviewsPart_DeleteDialog_Title"],
            parameters, options)).Result;

        if (!confirmationResult.Cancelled && bool.TryParse(confirmationResult.Data.ToString(), out bool resultBool))
        {
            var response = await Client.DeleteAsync(string.Format(
                "{0}?id={1}",
                ApiRoutes.Review.Controller,
                review.Id));

            if (!response.IsSuccessStatusCode)
            {
                parameters = new DialogParameters();
                parameters.Add("Error", await response.Content.ReadAsStringAsync());
                
                await (await DialogService.ShowAsync<ErrorDialog>(
                    Localization["HomePage_ReviewsPart_ErrorDialog_Title"],
                    parameters, options)).Result;

                return;
            }
            
            switch (_Scope)
            {
                case ReviewsScope.Berth:
                    response = await Client.GetAsync(ApiRoutes.Review.ByBerth + "?id=" + Id);
                    break;
                case ReviewsScope.Harbor:
                    response = await Client.GetAsync(ApiRoutes.Review.ByHarbor + "?id=" + Id);
                    break;
            }
        
            _reviews = await response.Content.ReadFromJsonAsync<List<ReviewPreviewDataDto>>();
            
            response = await Client.GetAsync(ApiRoutes.Harbor.ById + "?id=" + Id);

            _harborData = await response.Content.ReadFromJsonAsync<HarborPreviewDataDto>();

            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        HttpResponseMessage response = default;
        
        var token = await LocalStorageService.GetItemAsync<string>("token");
        
        if (!string.IsNullOrEmpty(token))
        {
            Client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            response = await Client.GetAsync(ApiRoutes.Account.Controller);

            var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

            if (userDto == null)
            {
                await LocalStorageService.RemoveItemAsync("token");
                NavManager.NavigateTo(PageNavigateConstants.IndexPage);
            }
            
            _isAdmin = userDto.IsAdmin;
            _isAuthorized = true;
        }
        
        response = await Client.GetAsync(ApiRoutes.Harbor.ById + "?id=" + Id);

        _harborData = await response.Content.ReadFromJsonAsync<HarborPreviewDataDto>();
        
        switch (_Scope)
        {
            case ReviewsScope.Berth:
                response = await Client.GetAsync(ApiRoutes.Review.ByBerth + "?id=" + Id);
                break;
            case ReviewsScope.Harbor:
                response = await Client.GetAsync(ApiRoutes.Review.ByHarbor + "?id=" + Id);
                break;
        }

        _reviews = await response.Content.ReadFromJsonAsync<List<ReviewPreviewDataDto>>();

        StateHasChanged();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }
}