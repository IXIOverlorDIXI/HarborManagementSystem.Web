@using System.Globalization
@using System.Net.Http.Headers
@using Domain.Dtos
@using IoC.Constants
@using UI.FormEntities
@using UI.Validators.Harbor
@inject LocalizationService LocalizationService
@inject IStringLocalizer<Localizations.Localization> Localization
@inject NavigationManager NavManager
@inject HttpClient Client
@inject Blazored.LocalStorage.ILocalStorageService LocalStorageService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime

<MudText Typo="Typo.h3" Align="Align.Start" Style="width: 100%">
    @Localization["HarborPage_BerthPart_Title"]
</MudText>
@if (IsOwner)
{
    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info"
               OnClick="createBerth">
        @Localization["HarborPage_BerthPart_CreateBerthButton"]
    </MudButton>
}
<MudPaper Class="d-flex flex-row flex-wrap flex-grow-1 gap-4 ma-2 pa-2" Elevation="0">
    @foreach (var berth in _berths)
    {
        <MudPaper Class="d-flex flex-column flex-grow-1 gap-2 pa-2" MaxWidth="400" Elevation="1"
                  @onclick="() => berthDetails(berth)" Style="cursor: pointer">
            @if (IsOwner)
            {
                <MudPaper Class="d-flex justify-start gap-2" Elevation="0">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Default"
                               OnClick="() => getBookingsForBerth(berth)">
                        @Localization["HarborPage_BerthPart_GetBookingsButton"]
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info"
                               OnClick="() => turnBerthMode(berth)">
                        @if (berth.IsActive)
                        {
                            @Localization["HarborPage_BerthPart_DisableBerthButton"]
                        }
                        else
                        {
                            @Localization["HarborPage_BerthPart_ActivateBerthButton"]
                        }
                    </MudButton>

                </MudPaper>
            }

            <MudPaper Class="d-flex flex-row flex-grow-1 gap-2" MaxWidth="400" Elevation="0">
                <MudPaper Class="d-flex flex-column align-content-center gap-1"
                          MaxHeight="180" MaxWidth="80" Elevation="0">
                    @for (int i = 0; i < berth.Photos.Count && i < 3; i++)
                    {
                        <MudImage Src="@berth.Photos[i]" Height="50" Width="50" ObjectFit="ObjectFit.Fill"/>
                    }
                    @if (!berth.Photos.Any())
                    {
                        <MudImage Src="@DefaultFileLinks.DefaultImage" Height="50" Width="50" ObjectFit="ObjectFit.Fill"/>
                    }
                </MudPaper>
                <MudPaper Class="d-flex flex-column align-content-center flex-grow-1 gap-2" Elevation="0">
                    <MudPaper Class="d-flex justify-space-between  gap-2" Elevation="0">
                        <MudPaper Class="d-flex flex-column gap-1" Elevation="0">
                            <MudText Typo="@Typo.h5">@berth.DisplayName</MudText>
                            <MudText Typo="@Typo.subtitle2">
                                @Localization["HarborPage_BerthPart_BerthDescriptionText"]:
                                @berth.Description
                            </MudText>
                            <MudText Typo="@Typo.subtitle2">
                                @Localization["HarborPage_BerthPart_BerthPriceText"]:
                                @berth.Price$
                            </MudText>
                            <MudPaper Class="d-flex flex-column gap-0" Elevation="0">
                                <MudText Typo="@Typo.subtitle2">
                                    @Localization["HarborPage_BerthPart_Berth_SuitableTypesText"]:
                                </MudText>

                                @foreach (var shipType in berth.SuitableShipTypes)
                                {
                                    <MudPaper Elevation="0" Class="mx-3 my-1">
                                        <MudText Typo="@Typo.subtitle2">
                                            @Localization["HarborPage_BerthPart_Berth_TypeNameText"]:
                                            @shipType.TypeName
                                        </MudText>

                                        <MudText Typo="@Typo.subtitle2">
                                            @Localization["HarborPage_BerthPart_Berth_TypeDescriptionText"]:
                                            @shipType.Description
                                        </MudText>

                                    </MudPaper>

                                }
                            </MudPaper>
                        </MudPaper>
                        
                        <MudPaper Class="d-flex flex-column align-center gap-1" Elevation="0">
                            <MudRating ReadOnly="true" SelectedValue="@((int)(berth.AverageRate))"/>
                            <MudText Typo="@Typo.subtitle2">
                                @Localization["HarborPage_BerthPart_Berth_ReviewAmountText"]:
                                @berth.ReviewsAmount
                            </MudText>
                            <MudCheckBox Class="ma-0 pa-0" LabelPosition="LabelPosition.Start"
                                         Label="@Localization["HarborPage_BerthPart_BerthIsActive"]"
                                         @bind-Checked="@berth.IsActive" Dense="true"
                                         ReadOnly="true">
                            </MudCheckBox >
                        </MudPaper>
                    </MudPaper>
                </MudPaper>
            </MudPaper>
            @if (IsOwner)
            {
                <MudPaper Class="d-flex justify-start gap-2" MaxWidth="400" Elevation="0">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning"
                               OnClick="() => editBerth(berth)">
                        @Localization["HarborPage_BerthPart_EditBerthButton"]
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Error"
                               OnClick="() => deleteBerth(berth)">
                        @Localization["HarborPage_BerthPart_DeleteBerthButton"]
                    </MudButton>
                </MudPaper>
            }
        </MudPaper>
    }
</MudPaper>

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public bool IsOwner { get; set; }

    private List<BerthPreviewDataDto> _berths { get; set; } = new List<BerthPreviewDataDto>();

    private void getBookingsForBerth(BerthPreviewDataDto berth) => NavManager.NavigateTo(
        string.Format("{0}/{1}/{2}",
            PageNavigateConstants.BookingHistoryPage,
            (int)BookingHistoryPageType.BookingsForBerth,
            berth.Id));

    private void berthDetails(BerthPreviewDataDto berth) => NavManager.NavigateTo((string.Format("{0}/{1}/{2}/{3}",
        PageNavigateConstants.HarborPage,
        Id,
        PageNavigateConstants.BerthPage,
        berth.Id)));

    private void createBerth() => NavManager.NavigateTo(string.Format("{0}/{1}", PageNavigateConstants.BerthFormPage, Id));

    private void editBerth(BerthPreviewDataDto berth) => NavManager.NavigateTo((string.Format("{0}/{1}/{2}/{3}",
        PageNavigateConstants.HarborPage,
        Id,
        PageNavigateConstants.BerthPage,
        berth.Id)));

    private async Task turnBerthMode(BerthPreviewDataDto berth)
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var response = await Client.PutAsync(string.Format(
            "{0}?id={1}",
            ApiRoutes.Berth.TurnOffOnTheBerth,
            berth.Id), null);

        if (!response.IsSuccessStatusCode)
        {
            var parameters = new DialogParameters();
            parameters.Add("Error", await response.Content.ReadAsStringAsync());
            
            var options = new DialogOptions { CloseOnEscapeKey = true };

            await (await DialogService.ShowAsync<ErrorDialog>(
                Localization["HarborPage_BerthPart_ErrorDialog_Title"],
                parameters, options)).Result;
        }
        else
        {
            response = await Client.GetAsync(ApiRoutes.Berth.Controller + "?id=" + Id);

            _berths = await response.Content.ReadFromJsonAsync<List<BerthPreviewDataDto>>();
        }

        StateHasChanged();
    }

    private async Task deleteBerth(BerthPreviewDataDto berth)
    {
        var token = await LocalStorageService.GetItemAsync<string>("token");

        Client.DefaultRequestHeaders.Authorization =
            new AuthenticationHeaderValue("Bearer", token);

        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var confirmationResult = await (await DialogService.ShowAsync<DeleteDialog>(
            Localization["HarborPage_BerthPart_DeleteDialog_Title"],
            parameters, options)).Result;

        if (!confirmationResult.Cancelled && bool.TryParse(confirmationResult.Data.ToString(), out bool resultBool))
        {
            var response = await Client.DeleteAsync(string.Format(
                "{0}?id={1}",
                ApiRoutes.Berth.Controller,
                berth.Id));

            if (!response.IsSuccessStatusCode)
            {
                parameters = new DialogParameters();
                parameters.Add("Error", await response.Content.ReadAsStringAsync());
                
                await (await DialogService.ShowAsync<ErrorDialog>(
                    Localization["HarborPage_BerthPart_ErrorDialog_Title"],
                    parameters, options)).Result;
            }

            response = await Client.GetAsync(ApiRoutes.Berth.Controller + "?id=" + Id);

            _berths = await response.Content.ReadFromJsonAsync<List<BerthPreviewDataDto>>();

            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.CultureChanged += UpdatePage;
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        var token = await LocalStorageService.GetItemAsync<string>("token");

        HttpResponseMessage response;

        if (!string.IsNullOrEmpty(token))
        {
            Client.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            response = await Client.GetAsync(ApiRoutes.Account.Controller);

            var userDto = await response.Content.ReadFromJsonAsync<UserDto>();

            if (userDto == null)
            {
                await LocalStorageService.RemoveItemAsync("token");
                NavManager.NavigateTo(PageNavigateConstants.IndexPage);
            }
        }

        response = await Client.GetAsync(ApiRoutes.Berth.Controller + "?id=" + Id);

        _berths = await response.Content.ReadFromJsonAsync<List<BerthPreviewDataDto>>();
    }

    private void UpdatePage()
    {
        CultureInfo.DefaultThreadCurrentCulture = LocalizationService.GetCulture();
        CultureInfo.DefaultThreadCurrentUICulture = LocalizationService.GetCulture();

        StateHasChanged();
    }

}